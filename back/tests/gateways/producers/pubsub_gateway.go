// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gateways/pubsub_gateway.go

// Package producer is a generated GoMock package.
package producer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPubSubGateway is a mock of PubSubGateway interface.
type MockPubSubGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubGatewayMockRecorder
}

// MockPubSubGatewayMockRecorder is the mock recorder for MockPubSubGateway.
type MockPubSubGatewayMockRecorder struct {
	mock *MockPubSubGateway
}

// NewMockPubSubGateway creates a new mock instance.
func NewMockPubSubGateway(ctrl *gomock.Controller) *MockPubSubGateway {
	mock := &MockPubSubGateway{ctrl: ctrl}
	mock.recorder = &MockPubSubGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubGateway) EXPECT() *MockPubSubGatewayMockRecorder {
	return m.recorder
}

// GetSubscribers mocks base method.
func (m *MockPubSubGateway) GetSubscribers(room string) ([]chan string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", room)
	ret0, _ := ret[0].([]chan string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockPubSubGatewayMockRecorder) GetSubscribers(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockPubSubGateway)(nil).GetSubscribers), room)
}

// Publish mocks base method.
func (m *MockPubSubGateway) Publish(topic, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", topic, message)
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubGatewayMockRecorder) Publish(topic, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubGateway)(nil).Publish), topic, message)
}

// Subscribe mocks base method.
func (m *MockPubSubGateway) Subscribe(topic string) chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(chan string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubGatewayMockRecorder) Subscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubGateway)(nil).Subscribe), topic)
}
